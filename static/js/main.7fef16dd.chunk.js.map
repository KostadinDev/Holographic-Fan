{"version":3,"sources":["images/ComputerScience-no-background-pc.png","components/custom-button/custom-button.component.jsx","components/custom-button/custom-input.component.jsx","components/file-upload-box/file-upload-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","CustomButton","children","otherProps","className","CustomInput","FileUploadBox","props","onFileChange","event","setState","selectedFile","target","files","onFileUpload","formData","FormData","append","state","name","console","log","axios","post","fileData","Card","bg","style","width","Body","Title","Text","type","lastModifiedDate","toDateString","handleSubmit","preventDefault","email","password","handleChange","value","onChange","this","onClick","React","Component","App","error","isLoaded","items","fetch","then","res","json","result","require","QRCode","onBeforeunload","align","backgroundImage","UHLogo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,8D,wRCU5BC,G,MANM,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAaC,EAAf,mCACjB,0CAAQC,UAAU,iBAAoBD,GACjCD,KCIMG,EANK,SAAC,GAAD,IAAEH,EAAF,EAAEA,SAAaC,EAAf,mCAChB,yCAAOC,UAAU,gBAAmBD,GAC/BD,I,OC+FMI,E,kDA9FX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAOVC,aAAe,SAAAC,GAEX,EAAKC,SAAS,CAACC,aAAcF,EAAMG,OAAOC,MAAM,MAVjC,EAcnBC,aAAe,WAEX,IAAMC,EAAW,IAAIC,SAErBD,EAASE,OACL,SACA,EAAKC,MAAMP,aACX,EAAKO,MAAMP,aAAaQ,MAG5BC,QAAQC,IAAI,EAAKH,MAAMP,cAEvBW,IAAMC,KAAK,iBAAkBR,IA1Bd,EA6BnBS,SAAW,WAEP,OAAI,EAAKN,MAAMP,aAIP,6BACI,kBAACc,EAAA,EAAD,CAAMC,GAAK,OAAOC,MAAO,CAAEC,MAAO,UAE9B,kBAACH,EAAA,EAAKI,KAAN,KACI,kBAACJ,EAAA,EAAKK,MAAN,KAAY,8CACZ,kBAACL,EAAA,EAAKM,KAAN,KACI,yCAAe,EAAKb,MAAMP,aAAaQ,MACvC,yCAAe,EAAKD,MAAMP,aAAaqB,MACvC,4CACmB,IACd,EAAKd,MAAMP,aAAasB,iBAAiBC,oBAU9D,6BACI,6BACA,0EAzDG,EAiEnBC,aAAe,SAAA1B,GACXA,EAAM2B,iBACN,EAAK1B,SAAS,CAAC2B,MAAO,GAAIC,SAAU,MAnErB,EAsEnBC,aAAe,SAAA9B,GAAU,IAAD,EACEA,EAAMG,OAArB4B,EADa,EACbA,MAAOrB,EADM,EACNA,KACd,EAAKT,SAAL,eAAgBS,EAAOqB,KAtEvB,EAAKtB,MAAQ,CACTmB,MAAO,GACPC,SAAU,GACV3B,aAAc,MALH,E,qDA4Ef,OACI,yBAAKP,UAAU,WACX,6BACI,kBAAC,EAAD,CAAa4B,KAAK,OAAOS,SAAUC,KAAKlC,eAExC,kBAAC,EAAD,CAAcmC,QAASD,KAAK5B,cAA5B,YAKH4B,KAAKlB,gB,GAvFMoB,IAAMC,W,yBCwDnBC,G,wDArDX,WAAYvC,GAAO,IAAD,8BACd,cAAMA,IACDW,MAAQ,CACT6B,MAAM,KACNC,UAAU,EACVC,MAAM,IALI,E,gEAQG,IAAD,OAChBC,MAAM,iCACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACG,EAAK5C,SAAS,CACVsC,UAAU,EACVC,MAAOK,EAAOL,WAMtB,SAACF,GACG,EAAKrC,SAAS,CACVsC,UAAU,EACVD,e,+BAOhB,IAAIH,EAAQW,EAAQ,GAChBC,EAASD,EAAQ,IAErB,OACI,uBAAKnD,UAAU,OACX,gBAAC,IAAD,CAAcqD,eAAgB,iBAAM,4BACpC,uBAAKC,MAAQ,UACT,uBAAKtD,UAAU,QAAQuB,MAAO,CAACgC,gBAAgB,OAAD,OAASC,IAAT,SAGlD,8CAGA,uBAAKF,MAAM,UACP,gBAAC,EAAD,MACA,gBAACF,EAAD,CAAQhB,MAAM,2C,GA/ChBK,cCIEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAA7B,GACL3B,QAAQ2B,MAAMA,EAAM8B,c","file":"static/js/main.7fef16dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ComputerScience-no-background-pc.07615a85.png\";","import React from 'react';\r\n\r\nimport './custom-button.styles.css';\r\n\r\nconst CustomButton = ({children, ...otherProps}) => (\r\n    <button className='custom-button' {...otherProps}>\r\n        {children}\r\n    </button>\r\n);\r\n\r\nexport default CustomButton;\r\n","import React from 'react';\r\n\r\n//import './custom-input.css';\r\n\r\nconst CustomInput = ({children, ...otherProps}) => (\r\n    <input className='custom-input' {...otherProps}>\r\n        {children}\r\n    </input>\r\n);\r\n\r\nexport default CustomInput;\r\n","import React from 'react';\r\nimport './file-upload-box.styles.css'\r\nimport CustomButton from '../custom-button/custom-button.component'\r\nimport CustomInput from '../custom-button/custom-input.component'\r\nimport Card from 'react-bootstrap/Card';\r\nimport axios from \"axios\";\r\nclass FileUploadBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            selectedFile: null\r\n        }\r\n    }\r\n    onFileChange = event => {\r\n\r\n        this.setState({selectedFile: event.target.files[0]});\r\n\r\n    };\r\n\r\n    onFileUpload = () => {\r\n\r\n        const formData = new FormData();\r\n\r\n        formData.append(\r\n            \"myFile\",\r\n            this.state.selectedFile,\r\n            this.state.selectedFile.name\r\n        );\r\n\r\n        console.log(this.state.selectedFile);\r\n\r\n        axios.post(\"api/uploadfile\", formData);\r\n    };\r\n\r\n    fileData = () => {\r\n\r\n        if (this.state.selectedFile) {\r\n\r\n            return (\r\n\r\n                <div>\r\n                    <Card bg = 'dark' style={{ width: '18rem' }}>\r\n                        {/*<Card.Img variant=\"top\" src=\"holder.js/100px180\" />*/}\r\n                        <Card.Body>\r\n                            <Card.Title><h2>File Details:</h2></Card.Title>\r\n                            <Card.Text>\r\n                                <p>File Name: {this.state.selectedFile.name}</p>\r\n                                <p>File Type: {this.state.selectedFile.type}</p>\r\n                                <p>\r\n                                    Last Modified:{\" \"}\r\n                                    {this.state.selectedFile.lastModifiedDate.toDateString()}\r\n                                </p>\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <br/>\r\n                    <h4>Choose before Pressing the Upload button</h4>\r\n\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        this.setState({email: '', password: ''});\r\n    };\r\n\r\n    handleChange = event => {\r\n        const {value, name} = event.target;\r\n        this.setState({[name]: value});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"sign-in\">\r\n                <div>\r\n                    <CustomInput type=\"file\" onChange={this.onFileChange}/>\r\n\r\n                    <CustomButton onClick={this.onFileUpload}>\r\n                        Upload!\r\n                    </CustomButton>\r\n                </div>\r\n\r\n                {this.fileData()}\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default FileUploadBox;\r\n","import axios from 'axios';\nimport {Beforeunload} from 'react-beforeunload';\nimport React, {Component} from 'react';\nimport FileUploadBox from './components/file-upload-box/file-upload-box.component'\nimport './App.css'\nimport UHLogo from './images/ComputerScience-no-background-pc.png'\nimport QRCode from 'qrcode.react'\n\nclass App extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            error:null,\n            isLoaded: false,\n            items:[]\n        };\n    }\n    componentDidMount() {\n        fetch(\"https://api.example.com/items\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        items: result.items\n                    });\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n\n    render() {\n        var React = require('react');\n        var QRCode = require('qrcode.react');\n\n        return (\n            <div className=\"App\">\n                <Beforeunload onBeforeunload={() => \"You'll lose your data!\"}/>\n                <div align = \"center\">\n                    <div className='image' style={{backgroundImage: `url(${UHLogo})`}}/>\n\n                </div>\n                <h3>\n                    Hologram Display\n                </h3>\n                <div align=\"center\">\n                    <FileUploadBox/>\n                    <QRCode value=\"http://facebook.github.io/react/\" />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}